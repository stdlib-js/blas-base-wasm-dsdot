{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEYA2AAAGAFf39/f38BfGAHf39/f39/fwF8Ag8BA2VudgZtZW1vcnkCAAADBAMAAQIHMQMRX193YXNtX2NhbGxfY3RvcnMAAAdjX2RzZG90AAEPY19kc2RvdF9uZGFycmF5AAIK6QIDAwABCy0AIAAgASACQQEgAGsiACACbEEAIAJBAEwbIAMgBCAAIARsQQAgBEEATBsQAgu0AgIBfwF8AkAgAEEATARADAELIAJBAUcgBUEBR3JFBEACQCAAQQVwIgVFDQADQCAFIAdGDQEgASADQQJ0aioCALsgBCAGQQJ0aioCALuiIAigIQggB0EBaiEHIAZBAWohBiADQQFqIQMMAAsACyAAQQVIDQEDQCAAIAVMDQIgCCABIANBAnRqIgIqAhC7IAQgBkECdGoiByoCELuiIAIqAgy7IAcqAgy7oiACKgIIuyAHKgIIu6IgAioCALsgByoCALuiIAIqAgS7IAcqAgS7oqCgoKCgIQggBUEFaiEFIAZBBWohBiADQQVqIQMMAAsACwNAIAAgB0YNASABIANBAnRqKgIAuyAEIAZBAnRqKgIAu6IgCKAhCCAHQQFqIQcgBSAGaiEGIAIgA2ohAwwACwALIAgL' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dsdot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dsdot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dsdot.write( xptr, oneTo( N, dtype ) );\n* dsdot.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var dot = dsdot.main( N, xptr, 1, yptr, 1 );\n* // returns 15.0\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - first input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} yptr - second input array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dsdot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dsdot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dsdot.write( xptr, oneTo( N, dtype ) );\n* dsdot.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var dot = dsdot.main( N, xptr, 1, yptr, 1 );\n* // returns 15.0\n*/\nsetReadOnly( Module.prototype, 'main', function dsdot( N, xptr, strideX, yptr, strideY ) {\n\treturn this._instance.exports.c_dsdot( N, xptr, strideX, yptr, strideY );\n});\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - first input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NonNegativeInteger} yptr - second input array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {number} dot product\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dsdot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dsdot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dsdot.write( xptr, oneTo( N, dtype ) );\n* dsdot.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var dsdot = dsdot.ndarray( N, xptr, 1, 0, yptr, 1, 0 );\n* // returns 15.0\n*/\nsetReadOnly( Module.prototype, 'ndarray', function dsdot( N, xptr, strideX, offsetX, yptr, strideY, offsetY ) {\n\treturn this._instance.exports.c_dsdot_ndarray( N, xptr, strideX, offsetX, yptr, strideY, offsetY ); // eslint-disable-line max-len\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var dsdot = new Routine();\n*\n* // Initialize the module:\n* dsdot.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.main( x.length, x, 1, y, 1 );\n* // returns 15.0\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var dsdot = new Routine();\n*\n* // Initialize the module:\n* dsdot.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns 15.0\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var dsdot = new Routine();\n*\n* // Initialize the module:\n* dsdot.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.main( x.length, x, 1, y, 1 );\n* // returns 15.0\n*/\nsetReadOnly( Routine.prototype, 'main', function dsdot( N, x, strideX, y, strideY ) {\n\treturn this.ndarray( N, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n});\n\n/**\n* Computes the dot product of `x` and `y` with extended accumulation and result using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var dsdot = new Routine();\n*\n* // Initialize the module:\n* dsdot.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns 15.0\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function dsdot( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ptrs;\n\tvar p0;\n\tvar p1;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX ),\n\t\tstrided2object( N, y, strideY, offsetY )\n\t]);\n\tp0 = ptrs[0];\n\tp1 = ptrs[1];\n\n\t// Perform computation by calling the corresponding parent method:\n\treturn Module.prototype.ndarray.call( this, N, p0.ptr, p0.stride, p0.offset, p1.ptr, p1.stride, p1.offset ); // eslint-disable-line max-len\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly module to compute the dot product of `x` and `y` with extended accumulation and result.\n*\n* @name dsdot\n* @type {Routine}\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.main( x.length, x, 1, y, 1 );\n* // returns 15.0\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns 15.0\n*/\nvar dsdot = new Routine();\ndsdot.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default dsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to compute the dot product of `x` and `y` with extended accumulation and result.\n*\n* @module @stdlib/blas-base-wasm-dsdot\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import dsdot from '@stdlib/blas-base-wasm-dsdot';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.main( x.length, x, 1, y, 1 );\n* // returns 15.0\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import dsdot from '@stdlib/blas-base-wasm-dsdot';\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* var dot = dsdot.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // returns 15.0\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import dsdot from '@stdlib/blas-base-wasm-dsdot';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new dsdot.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n* mod.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var dot = mod.main( N, xptr, 1, yptr, 1 );\n*\n* console.log( dot );\n* // returns 15.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","xptr","strideX","yptr","strideY","_instance","exports","c_dsdot","offsetX","offsetY","c_dsdot_ndarray","x","y","ndarray","stride2offset","ptrs","p0","p1","arrays2ptrs","strided2object","ptr","stride","offset","dsdot","initializeSync","main"],"mappings":";;q7BA2BA,IAAIA,EAAOC,EAAoB,gpBCqD/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CCnBA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDcAG,EAAUb,EAAQM,GAsDlBQ,EAAad,EAAOe,UAAW,QAAQ,SAAgBC,EAAGC,EAAMC,EAASC,EAAMC,GAC9E,OAAOlB,KAAKmB,UAAUC,QAAQC,QAASP,EAAGC,EAAMC,EAASC,EAAMC,EAChE,IAwDAN,EAAad,EAAOe,UAAW,WAAW,SAAgBC,EAAGC,EAAMC,EAASM,EAASL,EAAMC,EAASK,GACnG,OAAOvB,KAAKmB,UAAUC,QAAQI,gBAAiBV,EAAGC,EAAMC,EAASM,EAASL,EAAMC,EAASK,EAC1F,IC7HAZ,EAAUH,EAASV,GAiCnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAgBC,EAAGW,EAAGT,EAASU,EAAGR,GACzE,OAAOlB,KAAK2B,QAASb,EAAGW,EAAGT,EAASY,EAAed,EAAGE,GAAWU,EAAGR,EAASU,EAAed,EAAGI,GAChG,IAmCAN,EAAaJ,EAAQK,UAAW,WAAW,SAAgBC,EAAGW,EAAGT,EAASM,EAASI,EAAGR,EAASK,GAC9F,IAAIM,EACAC,EACAC,EAWJ,OAJAD,GAJAD,EAAOG,EAAahC,KAAM,CACzBiC,EAAgBnB,EAAGW,EAAGT,EAASM,GAC/BW,EAAgBnB,EAAGY,EAAGR,EAASK,MAEtB,GACVQ,EAAKF,EAAK,GAGH/B,EAAOe,UAAUc,QAAQtB,KAAML,KAAMc,EAAGgB,EAAGI,IAAKJ,EAAGK,OAAQL,EAAGM,OAAQL,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,OACpG,ICrHG,IAACC,EAAQ,IAAI7B,EAChB6B,EAAMC,iBC4CN1B,EAAA2B,EAAA,SAAAzC"}